<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Copying and distribution of this file, with or without modification,
     are permitted in any medium without royalty provided the copyright
     notice and this notice are preserved.  This file is offered as-is,
     without any warranty.
-->

<!-- Note: This file not compatible with IrMaster! -->

<!--

Author: Bengt Martensson

-->
<exportformats>
<exportformat name="C" extension="c" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/remotes">
        <xsl:text>/* This file was automatically generated by irpxml2c.xsl */

const int frequency = </xsl:text>
<xsl:value-of select="remote/commandSet/command/raw/@frequency"/><xsl:text>;
</xsl:text>
<xsl:text>const char *protocol = "</xsl:text><xsl:value-of select="remote/commandSet/command/parameters/@protocol"/><xsl:text>";
</xsl:text>
<xsl:text>const int intro_burst_length = </xsl:text><xsl:value-of select="count(remote/commandSet/command[position()=1]/raw/intro/flash)"/>
<xsl:text>;
const int repeat_burst_length = </xsl:text><xsl:value-of select="count(remote/commandSet/command[position()=1]/raw/repeat/flash)"/>
<xsl:text>;
const int ending_burst_length = </xsl:text><xsl:value-of select="count(remote/commandSet/command[position()=1]/raw/ending/flash)"/>
<xsl:text>;

</xsl:text>
        <xsl:apply-templates select="//command" mode="ccf"/>

        <xsl:apply-templates select="//command" mode="raw"/>
    </xsl:template>

    <xsl:template match="command" mode="ccf">
<xsl:text>/* Signal D = </xsl:text>
        <xsl:value-of select="parameters/parameter[@name='D']/@value"/>
        <xsl:text>; S = </xsl:text>
        <xsl:value-of select="parameters/parameter[@name='S']/@value"/>
        <xsl:text>; F = </xsl:text>
        <xsl:value-of select="parameters/parameter[@name='F']/@value"/>
        <xsl:text> */
const char *pronto_</xsl:text>
        <xsl:value-of select="parameters/@protocol"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="parameters/parameter[@name='D']/@value"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="parameters/parameter[@name='S']/@value"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="parameters/parameter[@name='F']/@value"/>
        <xsl:text> = "</xsl:text>
        <xsl:value-of select="ccf"/>
        <xsl:text>";
</xsl:text>
    </xsl:template>

    <xsl:template match="command" mode="raw">
       <xsl:text>const int raw_</xsl:text>
        <xsl:value-of select="parameters/@protocol"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="parameters/parameter[@name='D']/@value"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="parameters/parameter[@name='S']/@value"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="parameters/parameter[@name='F']/@value"/>
        <xsl:text>[] = { </xsl:text>
        <xsl:apply-templates select="raw"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <xsl:template match="raw">
        <xsl:apply-templates select="*/*"/>
    </xsl:template>

    <xsl:template match="flash"><xsl:value-of select="."/><xsl:text>,</xsl:text></xsl:template>

     <xsl:template match="raw/*[position()=last()]/gap[position()=last()]"><xsl:text>-</xsl:text><xsl:value-of select="."/></xsl:template>
     <xsl:template match="gap"><xsl:text>-</xsl:text><xsl:value-of select="."/><xsl:text>,</xsl:text></xsl:template>

</xsl:stylesheet>
</exportformat>

<exportformat name="Lintronic" extension="txt" multiSignal="false" simpleSequence="true">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <!--xsl:param name="noRepeats" select="4"/-->
    <xsl:output method="text" />

    <xsl:template match="/remotes">
        <xsl:text>Pulse, Pause in micro-seconds
</xsl:text>
<xsl:apply-templates select="remote[position()=1]/commandSet[position()=1]/command[position()=1]"/>
    </xsl:template>


    <xsl:template match="command">

        <xsl:apply-templates select="raw"/>
    </xsl:template>

    <xsl:template match="raw">
        <xsl:apply-templates select="intro/*"/>
        <xsl:call-template name="repeat"/>
        <xsl:apply-templates select="ending/*"/>
    </xsl:template>

    <xsl:template name="repeat">
         <xsl:param name="n" select="number($noRepeats)"/>
         <xsl:if test="not($n = 1)">
             <xsl:call-template name="repeat">
                 <xsl:with-param name="n" select="$n - 1"/>
             </xsl:call-template>
         </xsl:if>
         <xsl:apply-templates select="repeat/*"/>
    </xsl:template>

    <xsl:template match="flash"><xsl:value-of select='format-number(number(.),"00000")'/><xsl:text>,</xsl:text></xsl:template>
     <xsl:template match="gap"><xsl:text></xsl:text><xsl:value-of select='format-number(number(.),"00000")'/><xsl:text> = </xsl:text><xsl:value-of select='format-number(number(.)+number(preceding-sibling::flash[1]), "00000")'/><xsl:text>
</xsl:text></xsl:template>

</xsl:stylesheet>
</exportformat>


<exportformat name="IRTrans" extension="rem" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/remotes/remote[position()=1]">
        <xsl:text>[REMOTE]
 [NAME]ccf_</xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>

[COMMANDS]
</xsl:text>
        <xsl:apply-templates select="commandSet/command"/>
    </xsl:template>

    <xsl:template match="command">
      <xsl:text> [</xsl:text>
      <xsl:value-of select="@name"/>
      <xsl:text>][CCF]</xsl:text>
      <xsl:value-of select="ccf"/>
      <xsl:text>
</xsl:text>
    </xsl:template>

</xsl:stylesheet>
</exportformat>

<exportformat name="TV B Gone" extension="c" multiSignal="false" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/remotes/remote[position()=1]/commandSet/command[position()=1]">
        <xsl:text>const struct powercode xCode PROGMEM = {
   freq_to_timerval(</xsl:text>
        <xsl:value-of select="raw/@frequency"/>
        <xsl:text>),
   {
</xsl:text>
        <xsl:apply-templates select="raw/*/*"/>
        <!--xsl:apply-templates select="command[position()=1]"/-->
        <xsl:text>   }
};
</xsl:text>
    </xsl:template>

    <xsl:template match="command">
    <xsl:apply-templates select="raw/*/*"/>
    </xsl:template>

    <xsl:template match="flash">
      <xsl:text>      { </xsl:text>
      <xsl:value-of select="round(number(.) div 10)"/>
      <xsl:text>, </xsl:text>
     </xsl:template>

    <xsl:template match="gap">
      <xsl:value-of select="round(number(.) div 10)"/>
      <xsl:text> },
</xsl:text>
     </xsl:template>

</xsl:stylesheet>
</exportformat>

<exportformat name="Spreadsheet" extension="tsv" multiSignal="true" simpleSequence="false">
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
        <xsl:output method="text" />

        <xsl:template match="/">
            <xsl:apply-templates select="remotes/remote/commandSet/command"/>
        </xsl:template>

        <xsl:template match="command">
            <xsl:value-of select="@name"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="parameters/@protocol"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="parameters/parameter[@name='D']/@value"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="parameters/parameter[@name='S']/@value"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="parameters/parameter[@name='F']/@value"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="parameters/parameter[@name='T']/@value"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:apply-templates select="parameters/parameter[not(@name='F' or @name='D' or @name='S' or @name='T')]"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="raw/@frequency"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:apply-templates select="raw/intro/*"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:apply-templates select="raw/repeat/*"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:apply-templates select="raw/ending/*"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="ccf"/>
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="@comment"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:template>

        <xsl:template match="parameter">
            <xsl:value-of select="@name"/>
            <xsl:text>=</xsl:text>
            <xsl:value-of select="@value"/>
            <xsl:if test="position()!=last()">
                <xsl:text> </xsl:text>
            </xsl:if>
        </xsl:template>

        <xsl:template match="flash">
            <xsl:text>+</xsl:text>
            <xsl:value-of select="."/>
            <xsl:text> </xsl:text>
        </xsl:template>
        <xsl:template match="gap">
            <xsl:text>-</xsl:text>
            <xsl:value-of select="."/>
            <xsl:if test="position()!=last()">
                <xsl:text> </xsl:text>
            </xsl:if>
        </xsl:template>

    </xsl:stylesheet>
</exportformat>

<exportformat name="RMFunctions" extension="tsv" multiSignal="true" simpleSequence="false">
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
        <xsl:output method="text" />

        <xsl:template match="/">
            <xsl:apply-templates select="remotes/remote/commandSet/command"/>
        </xsl:template>

        <xsl:template match="command">
            <xsl:value-of select="@name"/>
            <xsl:text>&#9;</xsl:text> <!-- EFC -->
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="parameters/parameter[@name='F']/@value"/>
            <xsl:text>&#9;</xsl:text> <!-- Hex -->
            <xsl:text>&#9;</xsl:text>
            <xsl:value-of select="@comment"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:template>

    </xsl:stylesheet>
</exportformat>

<exportformat name="ICT" extension="ict" multiSignal="true" simpleSequence="false">
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
        <xsl:output method="text" />

        <xsl:template match="/remotes">
            <xsl:text>irscope 0&#10;</xsl:text>
            <xsl:text>carrier_frequency </xsl:text>
            <xsl:value-of select="remote/commandSet/command/raw/@frequency"/>
            <xsl:text>&#10;</xsl:text>
            <xsl:text>sample_count </xsl:text>
            <xsl:value-of select="count(remote/commandSet/command/raw/*/*)"/>
            <xsl:text>&#10;</xsl:text>
            <xsl:apply-templates select="//command"/>
        </xsl:template>

        <xsl:template match="command">
            <xsl:text>note=</xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>&#10;</xsl:text>
            <xsl:apply-templates select="*/*"/>
        </xsl:template>

        <xsl:template match="flash">
            <xsl:text>+</xsl:text>
            <xsl:value-of select="."/>
            <xsl:text>,</xsl:text>
            <xsl:value-of select="round(number(.) * number(../../@frequency div 1000000))"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:template>

        <xsl:template match="gap">
            <xsl:text>-</xsl:text>
            <xsl:value-of select="."/>
            <xsl:text>&#10;</xsl:text>
        </xsl:template>

        <!-- There is a bug/design flaw in IrScope that makes it want to bundle all
        signals into one gigantic macro. Using brute force to circumvent... -->
        <xsl:template match="gap[position()=last()]">
            <xsl:text>-500000&#10;</xsl:text>
        </xsl:template>

    </xsl:stylesheet>
</exportformat>

<exportformat name="IrToy" extension="txt" multiSignal="false" simpleSequence="true">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <!--xsl:param name="noRepeats" select="4"/-->
    <xsl:param name="period" select="21.3333"/>
    <xsl:output method="text" />

    <xsl:template match="/remotes">
<xsl:apply-templates select="remote[position()=1]/commandSet[position()=1]/command[position()=1]"/>
    </xsl:template>

    <xsl:template match="command">
        <xsl:apply-templates select="raw"/>
    </xsl:template>

    <xsl:template match="raw">
        <xsl:apply-templates select="intro/*"/>
        <xsl:if test="$noRepeats > 0">
            <xsl:call-template name="repeat"/>
        </xsl:if>
        <xsl:apply-templates select="ending/*"/>
    </xsl:template>

    <xsl:template name="repeat">
         <xsl:param name="n" select="number($noRepeats)"/>
          <xsl:if test="not($n = 1)">
              <xsl:call-template name="repeat">
                 <xsl:with-param name="n" select="$n - 1"/>
             </xsl:call-template>
         </xsl:if>
         <xsl:apply-templates select="repeat/*"/>
    </xsl:template>

    <xsl:template match="gap|flash">
        <xsl:variable name="periods" select="floor(number(.) div $period)"/>
    <xsl:call-template name="hexnum">
        <xsl:with-param name="value" select="floor($periods div 256)"/>
    </xsl:call-template>
    <xsl:call-template name="hexnum">
        <xsl:with-param name="value" select="$periods mod 256"/>
    </xsl:call-template>
    </xsl:template>

    <xsl:template name="hexnum">
        <xsl:param name="value"/>
        <xsl:call-template name="hexdigit">
            <xsl:with-param name="val" select="floor($value div 16)"/>
        </xsl:call-template>
        <xsl:call-template name="hexdigit">
            <xsl:with-param name="val" select="$value mod 16"/>
        </xsl:call-template>
        <xsl:text> </xsl:text>
    </xsl:template>

    <xsl:template name="hexdigit">
        <xsl:param name="val"/>
           <xsl:value-of select="substring('0123456789ABCDEF',$val+1,1)"/>
        </xsl:template>
</xsl:stylesheet>
</exportformat>

<exportformat name="IrToy-bin" binary="true" extension="bin" multiSignal="false" simpleSequence="true">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <!--xsl:param name="noRepeats" select="2"/-->
    <xsl:param name="period" select="21.3333"/>
    <xsl:output method="xml"/>

    <xsl:template match="/remotes">
        <xsl:text>
</xsl:text>
        <binary>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="remote[position()=1]/commandSet[position()=1]/command[position()=1]"/>
        </binary>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="command">
        <xsl:apply-templates select="raw"/>
    </xsl:template>

    <xsl:template match="raw">
        <xsl:apply-templates select="intro/*"/>
        <xsl:if test="$noRepeats > 0">
        <xsl:call-template name="repeat"/>
        </xsl:if>
        <xsl:apply-templates select="ending/*"/>
    </xsl:template>

    <xsl:template name="repeat">
         <xsl:param name="n" select="number($noRepeats)"/>
         <xsl:if test="not($n = 1)">
             <xsl:call-template name="repeat">
                 <xsl:with-param name="n" select="$n - 1"/>
             </xsl:call-template>
         </xsl:if>
         <xsl:apply-templates select="repeat/*"/>
    </xsl:template>

    <xsl:template match="gap|flash">
        <xsl:variable name="periods" select="floor(number(.) div $period)"/>
    <xsl:call-template name="hexnum">
        <xsl:with-param name="value" select="floor($periods div 256)"/>
    </xsl:call-template>
    <xsl:call-template name="hexnum">
        <xsl:with-param name="value" select="$periods mod 256"/>
    </xsl:call-template>
    </xsl:template>

    <xsl:template name="hexnum">
        <xsl:param name="value"/>
        <byte>
            <xsl:value-of select="$value"/>
        </byte>
        <xsl:text>
</xsl:text>
    </xsl:template>
</xsl:stylesheet>
</exportformat>

<exportformat name="mode2" extension="mode2" multiSignal="false" simpleSequence="true">
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
        <!--xsl:param name="noRepeats" select="4"/-->
        <xsl:output method="text" />

        <xsl:template match="/remotes">
            <xsl:apply-templates select="remote[position()=1]/commandSet[position()=1]/command[position()=1]"/>
        </xsl:template>

        <xsl:template match="command">
            <xsl:apply-templates select="raw"/>
        </xsl:template>

        <xsl:template match="raw">
            <xsl:apply-templates select="intro/*"/>
            <xsl:call-template name="repeat"/>
            <xsl:apply-templates select="ending/*"/>
        </xsl:template>

        <xsl:template name="repeat">
            <xsl:param name="n" select="number($noRepeats)"/>
            <xsl:if test="not($n = 1)">
                <xsl:call-template name="repeat">
                    <xsl:with-param name="n" select="$n - 1"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:apply-templates select="repeat/*"/>
        </xsl:template>

        <xsl:template match="flash">
            <xsl:text>pulse </xsl:text>
            <xsl:value-of select='.'/>
            <xsl:text>
</xsl:text>
        </xsl:template>
        <xsl:template match="gap">
            <xsl:text>space </xsl:text>
            <xsl:value-of select='.'/>
            <xsl:text>
</xsl:text>
        </xsl:template>

    </xsl:stylesheet>
</exportformat>

<exportformat name="AnyMote" extension="amsr" multiSignal="true" simpleSequence="false">
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
        <xsl:output method="text" />
        <xsl:strip-space elements="*" />

        <xsl:template match="remote[position()=1]">
            <xsl:text>{"name":"</xsl:text>
            <xsl:value-of select="@remoteName"/>
            <xsl:text>","all_codes":[</xsl:text>
            <xsl:apply-templates select="commandSet/command"/>
            <xsl:text>]}</xsl:text>
        </xsl:template>

        <xsl:template match="command">
            <xsl:text>{"function":"</xsl:text>
            <xsl:value-of select="@name"/>
            <xsl:text>","code1":"</xsl:text>
            <xsl:apply-templates select="raw"/>
            <xsl:text>"}</xsl:text>
            <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
            </xsl:if>
        </xsl:template>

        <xsl:template match="raw">
            <xsl:value-of select="@frequency"/>
            <xsl:text>,</xsl:text>
            <xsl:apply-templates select="node()/node()"/>
        </xsl:template>

        <xsl:template match="flash|gap">
            <xsl:value-of select="round(number(.) * number(../../@frequency) div 1000000)"/>
            <xsl:text>,</xsl:text>
        </xsl:template>

    </xsl:stylesheet>
</exportformat>

<exportformat name="irplus" extension="irplus" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>

    <xsl:template match="/remotes">
        <irplus>
            <xsl:comment>This file was automatically generated by IrScrutinizer</xsl:comment>
            <xsl:apply-templates select="remote"/>
        </irplus>
    </xsl:template>

    <xsl:template match="remote">
        <device>
            <xsl:attribute name="manufacturer">
                <xsl:value-of select="@manufacturer"/>
                <xsl:if test="not(@manufacturer)">unknown manufacturer</xsl:if>
            </xsl:attribute>
            <xsl:attribute name="model">
                <xsl:value-of select="@model"/>
                <xsl:if test="not(@model)">unknown model</xsl:if>
            </xsl:attribute>
            <xsl:attribute name="format">PRONTO_HEX</xsl:attribute>
            <!--xsl:attribute name="columns">3</xsl:attribute--> <!-- uncomment if desired -->
            <xsl:apply-templates select="commandSet/command"/>
        </device>
    </xsl:template>

    <xsl:template match="command">
        <button>
            <xsl:attribute name="label">
                <xsl:value-of select="@name"/>
            </xsl:attribute>
            <xsl:value-of select="ccf"/>
        </button>
    </xsl:template>
</xsl:stylesheet>

</exportformat>

</exportformats>
